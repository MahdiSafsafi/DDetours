#summary Delphi Detours Library .

= Introduction =
The Delphi Detours Library is a library allowing you to insert and remove hook from function . It support both (x86-x64) architecture .

The basic idea of this library is to replaces the prologue of the target function with the JMP (unconditional jump) instruction to the Intercepted function. 

This library contains too function : *!InterceptCreate* and *!InterceptRemove* functions .

== !InterceptCreate ==
{{{
function InterceptCreate(const TargetProc, InterceptProc: Pointer): Pointer;
}}}
This function can hook the !TargetProc to the !InterceptProc .

*!TargetProc :*  A pointer to the target function that you are going to hook . 

*!InterceptProc :* A pointer to the intercept function , this one will be executed instead of the original function when calling the original function (!TargetProc).

*Return :* The return value is a pointer to the *!TrampoLine function *.
The *!TrampoLine function * can execute the original function (!TargetProc).

If the function succeeds, the return value is a pointer to the TrampoLine function .

If the function fails , the return value is *nil*.

== InterceptRemove == 
{{{
function InterceptRemove(var Trampoline: Pointer): Boolean;
}}}
This function can remove the hook from the !TargetProc .

*Trampoline :* A pointer to the Trampoline that was returned by the *!InterceptCreate* function .It is necessary that you provide a valid parameter .

If the function succeeds, the return value is *True*.

If the function fails, the return value is *False*.

==Example :==
{{{
var
  TrampolineMessageBoxA: function(hWnd: hWnd; lpText, lpCaption: LPCSTR; uType: UINT): Integer;
stdcall = nil;

function InterceptMessageBoxA(hWnd: hWnd; lpText, lpCaption: LPCSTR; uType: UINT): Integer; stdcall;
begin
  Result := TrampolineMessageBoxA(hWnd, 'Hooked !!', lpCaption, uType);
end;

initialization

@TrampolineMessageBoxA := InterceptCreate(@MessageBoxA, @InterceptMessageBoxA);

finalization

if TrampolineMessageBoxA <> nil then
  InterceptRemove(@TrampolineMessageBoxA);

}}}